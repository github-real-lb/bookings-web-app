// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	db "github.com/github-real-lb/bookings-web-app/db"
	mock "github.com/stretchr/testify/mock"
)

// MockStore is an autogenerated mock type for the DatabaseStore type
type MockStore struct {
	mock.Mock
}

// CheckRoomAvailabilty provides a mock function with given fields: ctx, arg
func (_m *MockStore) CheckRoomAvailabilty(ctx context.Context, arg db.CheckRoomAvailabiltyParams) (bool, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CheckRoomAvailabilty")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CheckRoomAvailabiltyParams) (bool, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CheckRoomAvailabiltyParams) bool); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CheckRoomAvailabiltyParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReservation provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateReservation(ctx context.Context, arg db.CreateReservationParams) (db.Reservation, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateReservation")
	}

	var r0 db.Reservation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateReservationParams) (db.Reservation, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateReservationParams) db.Reservation); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Reservation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateReservationParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReservationTx provides a mock function with given fields: ctx, arg, restrictionsID
func (_m *MockStore) CreateReservationTx(ctx context.Context, arg db.CreateReservationParams, restrictionsID int64) (db.Reservation, error) {
	ret := _m.Called(ctx, arg, restrictionsID)

	if len(ret) == 0 {
		panic("no return value specified for CreateReservationTx")
	}

	var r0 db.Reservation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateReservationParams, int64) (db.Reservation, error)); ok {
		return rf(ctx, arg, restrictionsID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateReservationParams, int64) db.Reservation); ok {
		r0 = rf(ctx, arg, restrictionsID)
	} else {
		r0 = ret.Get(0).(db.Reservation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateReservationParams, int64) error); ok {
		r1 = rf(ctx, arg, restrictionsID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRestriction provides a mock function with given fields: ctx, name
func (_m *MockStore) CreateRestriction(ctx context.Context, name string) (db.Restriction, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for CreateRestriction")
	}

	var r0 db.Restriction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (db.Restriction, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) db.Restriction); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(db.Restriction)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRoom provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateRoom(ctx context.Context, arg db.CreateRoomParams) (db.Room, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoom")
	}

	var r0 db.Room
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateRoomParams) (db.Room, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateRoomParams) db.Room); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Room)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateRoomParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRoomRestriction provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateRoomRestriction(ctx context.Context, arg db.CreateRoomRestrictionParams) (db.RoomRestriction, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoomRestriction")
	}

	var r0 db.RoomRestriction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateRoomRestrictionParams) (db.RoomRestriction, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateRoomRestrictionParams) db.RoomRestriction); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.RoomRestriction)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateRoomRestrictionParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, arg
func (_m *MockStore) CreateUser(ctx context.Context, arg db.CreateUserParams) (db.User, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateUserParams) (db.User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateUserParams) db.User); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReservation provides a mock function with given fields: ctx, id
func (_m *MockStore) DeleteReservation(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReservation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRestriction provides a mock function with given fields: ctx, id
func (_m *MockStore) DeleteRestriction(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRestriction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRoom provides a mock function with given fields: ctx, id
func (_m *MockStore) DeleteRoom(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoom")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRoomRestriction provides a mock function with given fields: ctx, id
func (_m *MockStore) DeleteRoomRestriction(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoomRestriction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *MockStore) DeleteUser(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetReservation provides a mock function with given fields: ctx, id
func (_m *MockStore) GetReservation(ctx context.Context, id int64) (db.Reservation, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetReservation")
	}

	var r0 db.Reservation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (db.Reservation, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) db.Reservation); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Reservation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationByCode provides a mock function with given fields: ctx, code
func (_m *MockStore) GetReservationByCode(ctx context.Context, code string) (db.Reservation, error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for GetReservationByCode")
	}

	var r0 db.Reservation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (db.Reservation, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) db.Reservation); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Get(0).(db.Reservation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationByLastName provides a mock function with given fields: ctx, arg
func (_m *MockStore) GetReservationByLastName(ctx context.Context, arg db.GetReservationByLastNameParams) (db.Reservation, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetReservationByLastName")
	}

	var r0 db.Reservation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.GetReservationByLastNameParams) (db.Reservation, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.GetReservationByLastNameParams) db.Reservation); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Reservation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.GetReservationByLastNameParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRestriction provides a mock function with given fields: ctx, id
func (_m *MockStore) GetRestriction(ctx context.Context, id int64) (db.Restriction, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRestriction")
	}

	var r0 db.Restriction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (db.Restriction, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) db.Restriction); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Restriction)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoom provides a mock function with given fields: ctx, id
func (_m *MockStore) GetRoom(ctx context.Context, id int64) (db.Room, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRoom")
	}

	var r0 db.Room
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (db.Room, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) db.Room); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Room)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoomRestriction provides a mock function with given fields: ctx, id
func (_m *MockStore) GetRoomRestriction(ctx context.Context, id int64) (db.RoomRestriction, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRoomRestriction")
	}

	var r0 db.RoomRestriction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (db.RoomRestriction, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) db.RoomRestriction); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.RoomRestriction)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, id
func (_m *MockStore) GetUser(ctx context.Context, id int64) (db.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (db.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) db.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAvailableRooms provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListAvailableRooms(ctx context.Context, arg db.ListAvailableRoomsParams) ([]db.Room, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListAvailableRooms")
	}

	var r0 []db.Room
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListAvailableRoomsParams) ([]db.Room, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListAvailableRoomsParams) []db.Room); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Room)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListAvailableRoomsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReservations provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListReservations(ctx context.Context, arg db.ListReservationsParams) ([]db.Reservation, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListReservations")
	}

	var r0 []db.Reservation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListReservationsParams) ([]db.Reservation, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListReservationsParams) []db.Reservation); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Reservation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListReservationsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReservationsByRoom provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListReservationsByRoom(ctx context.Context, arg db.ListReservationsByRoomParams) ([]db.Reservation, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListReservationsByRoom")
	}

	var r0 []db.Reservation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListReservationsByRoomParams) ([]db.Reservation, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListReservationsByRoomParams) []db.Reservation); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Reservation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListReservationsByRoomParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRestrictions provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListRestrictions(ctx context.Context, arg db.ListRestrictionsParams) ([]db.Restriction, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListRestrictions")
	}

	var r0 []db.Restriction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListRestrictionsParams) ([]db.Restriction, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListRestrictionsParams) []db.Restriction); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Restriction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListRestrictionsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRoomRestrictions provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListRoomRestrictions(ctx context.Context, arg db.ListRoomRestrictionsParams) ([]db.RoomRestriction, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListRoomRestrictions")
	}

	var r0 []db.RoomRestriction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListRoomRestrictionsParams) ([]db.RoomRestriction, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListRoomRestrictionsParams) []db.RoomRestriction); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.RoomRestriction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListRoomRestrictionsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRooms provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListRooms(ctx context.Context, arg db.ListRoomsParams) ([]db.Room, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListRooms")
	}

	var r0 []db.Room
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListRoomsParams) ([]db.Room, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListRoomsParams) []db.Room); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Room)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListRoomsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields: ctx, arg
func (_m *MockStore) ListUsers(ctx context.Context, arg db.ListUsersParams) ([]db.User, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 []db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListUsersParams) ([]db.User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListUsersParams) []db.User); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListUsersParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReservation provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateReservation(ctx context.Context, arg db.UpdateReservationParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReservation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateReservationParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRestriction provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateRestriction(ctx context.Context, arg db.UpdateRestrictionParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRestriction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateRestrictionParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRoom provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateRoom(ctx context.Context, arg db.UpdateRoomParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoom")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateRoomParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRoomRestriction provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateRoomRestriction(ctx context.Context, arg db.UpdateRoomRestrictionParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoomRestriction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateRoomRestrictionParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: ctx, arg
func (_m *MockStore) UpdateUser(ctx context.Context, arg db.UpdateUserParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateUserParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
