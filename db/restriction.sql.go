// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: restriction.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRestriction = `-- name: CreateRestriction :one
INSERT INTO restrictions (
  name
) VALUES (
  $1
)
RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateRestriction(ctx context.Context, name pgtype.Text) (Restriction, error) {
	row := q.db.QueryRow(ctx, createRestriction, name)
	var i Restriction
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRestriction = `-- name: DeleteRestriction :exec
DELETE FROM restrictions
WHERE id = $1
`

func (q *Queries) DeleteRestriction(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteRestriction, id)
	return err
}

const getRestriction = `-- name: GetRestriction :one
SELECT id, name, created_at, updated_at FROM restrictions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRestriction(ctx context.Context, id int64) (Restriction, error) {
	row := q.db.QueryRow(ctx, getRestriction, id)
	var i Restriction
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listRestrictions = `-- name: ListRestrictions :many
SELECT id, name, created_at, updated_at FROM restrictions
ORDER BY name
LIMIT $1
OFFSET $2
`

type ListRestrictionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRestrictions(ctx context.Context, arg ListRestrictionsParams) ([]Restriction, error) {
	rows, err := q.db.Query(ctx, listRestrictions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Restriction{}
	for rows.Next() {
		var i Restriction
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRestriction = `-- name: UpdateRestriction :exec
UPDATE restrictions
  set   name = $2,
        updated_at = $3
WHERE id = $1
`

type UpdateRestrictionParams struct {
	ID        int64              `json:"id"`
	Name      pgtype.Text        `json:"name"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateRestriction(ctx context.Context, arg UpdateRestrictionParams) error {
	_, err := q.db.Exec(ctx, updateRestriction, arg.ID, arg.Name, arg.UpdatedAt)
	return err
}
