// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: room.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkRoomAvailability = `-- name: CheckRoomAvailability :one
SELECT count(*) = 0 as availabe
FROM room_restrictions
WHERE room_id = $1 AND (start_date < $2::date AND end_date > $3::date)
`

type CheckRoomAvailabilityParams struct {
	RoomID    int64       `json:"room_id"`
	EndDate   pgtype.Date `json:"end_date"`
	StartDate pgtype.Date `json:"start_date"`
}

func (q *Queries) CheckRoomAvailability(ctx context.Context, arg CheckRoomAvailabilityParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkRoomAvailability, arg.RoomID, arg.EndDate, arg.StartDate)
	var availabe bool
	err := row.Scan(&availabe)
	return availabe, err
}

const createRoom = `-- name: CreateRoom :one
INSERT INTO rooms (
  name, description, image_filename
) VALUES (
  $1, $2, $3
)
RETURNING id, name, description, image_filename, created_at, updated_at
`

type CreateRoomParams struct {
	Name          string `json:"name"`
	Description   string `json:"description"`
	ImageFilename string `json:"image_filename"`
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (Room, error) {
	row := q.db.QueryRow(ctx, createRoom, arg.Name, arg.Description, arg.ImageFilename)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ImageFilename,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllRooms = `-- name: DeleteAllRooms :exec
DELETE FROM rooms
`

func (q *Queries) DeleteAllRooms(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteAllRooms)
	return err
}

const deleteRoom = `-- name: DeleteRoom :exec
DELETE FROM rooms
WHERE id = $1
`

func (q *Queries) DeleteRoom(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteRoom, id)
	return err
}

const getRoom = `-- name: GetRoom :one
SELECT id, name, description, image_filename, created_at, updated_at FROM rooms
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRoom(ctx context.Context, id int64) (Room, error) {
	row := q.db.QueryRow(ctx, getRoom, id)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ImageFilename,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAvailableRooms = `-- name: ListAvailableRooms :many
SELECT id, name, description, image_filename, created_at, updated_at
FROM rooms
WHERE id NOT IN (
SELECT room_id
FROM room_restrictions
WHERE (end_date > $3::date AND start_date < $4::date)
)
ORDER BY name
LIMIT $1
OFFSET $2
`

type ListAvailableRoomsParams struct {
	Limit     int32       `json:"limit"`
	Offset    int32       `json:"offset"`
	StartDate pgtype.Date `json:"start_date"`
	EndDate   pgtype.Date `json:"end_date"`
}

func (q *Queries) ListAvailableRooms(ctx context.Context, arg ListAvailableRoomsParams) ([]Room, error) {
	rows, err := q.db.Query(ctx, listAvailableRooms,
		arg.Limit,
		arg.Offset,
		arg.StartDate,
		arg.EndDate,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Room{}
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ImageFilename,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRooms = `-- name: ListRooms :many
SELECT id, name, description, image_filename, created_at, updated_at FROM rooms
ORDER BY name
LIMIT $1
OFFSET $2
`

type ListRoomsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRooms(ctx context.Context, arg ListRoomsParams) ([]Room, error) {
	rows, err := q.db.Query(ctx, listRooms, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Room{}
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ImageFilename,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoom = `-- name: UpdateRoom :exec
UPDATE rooms
  set   name = $2,
        description = $3,
        updated_at = $4
WHERE id = $1
`

type UpdateRoomParams struct {
	ID          int64              `json:"id"`
	Name        string             `json:"name"`
	Description string             `json:"description"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateRoom(ctx context.Context, arg UpdateRoomParams) error {
	_, err := q.db.Exec(ctx, updateRoom,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.UpdatedAt,
	)
	return err
}
