// Code generated by mockery v2.42.0. DO NOT EDIT.

package loggermocks

import mock "github.com/stretchr/testify/mock"

// MockLogger is an autogenerated mock type for the Loggerer type
type MockLogger struct {
	mock.Mock
}

// IsLogDebugStack provides a mock function with given fields:
func (_m *MockLogger) IsLogDebugStack() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsLogDebugStack")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ListenAndLog provides a mock function with given fields: buffer
func (_m *MockLogger) ListenAndLog(buffer int) {
	_m.Called(buffer)
}

// Log provides a mock function with given fields: v
func (_m *MockLogger) Log(v interface{}) {
	_m.Called(v)
}

// MyLogChannel provides a mock function with given fields:
func (_m *MockLogger) MyLogChannel() chan interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MyLogChannel")
	}

	var r0 chan interface{}
	if rf, ok := ret.Get(0).(func() chan interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan interface{})
		}
	}

	return r0
}

// Shutdown provides a mock function with given fields:
func (_m *MockLogger) Shutdown() {
	_m.Called()
}

// NewMockLogger creates a new instance of MockLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogger {
	mock := &MockLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
