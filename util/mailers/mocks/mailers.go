// Code generated by mockery v2.42.0. DO NOT EDIT.

package mailermocks

import (
	mailers "github.com/github-real-lb/bookings-web-app/util/mailers"
	mock "github.com/stretchr/testify/mock"
)

// MockMailer is an autogenerated mock type for the Mailerer type
type MockMailer struct {
	mock.Mock
}

// ListenAndMail provides a mock function with given fields: errChan, buffer
func (_m *MockMailer) ListenAndMail(errChan chan interface{}, buffer int) {
	_m.Called(errChan, buffer)
}

// MyMailChannel provides a mock function with given fields:
func (_m *MockMailer) MyMailChannel() chan mailers.MailData {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MyMailChannel")
	}

	var r0 chan mailers.MailData
	if rf, ok := ret.Get(0).(func() chan mailers.MailData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan mailers.MailData)
		}
	}

	return r0
}

// SendMail provides a mock function with given fields: data
func (_m *MockMailer) SendMail(data mailers.MailData) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for SendMail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(mailers.MailData) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Shutdown provides a mock function with given fields:
func (_m *MockMailer) Shutdown() {
	_m.Called()
}

// NewMockMailer creates a new instance of MockMailer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMailer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMailer {
	mock := &MockMailer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
